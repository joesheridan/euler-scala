/*
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...

y=n(2n-1) ==     y/2 = n^2 - n/2
(n + a)^2
n^2 + 2na + a^2
(n - 1/4)^2 = sqrt(y/2 - 1/16) + 1/4
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
 */

def getTriangle(n: Int): Int = (n * (n + 1) ) / 2

def getPentagon(n: Int) : Int = (n * ((3*n) -1) ) / 2

def isPentagonal(n: Int): Boolean = {
  def getPn(n: Int): Double = {
    val a = ((2 * n).toDouble / 3) + (1.toDouble/36)
    1.toDouble/6 + Math.sqrt(a)
  }
  val y = getPn(n)
  // return true if y is round number
  // i.e. floor(34.2) != 34.2
  Math.floor(y) == y
}

def getHexagon(n: Int): Long = (n.toLong * (2 * n - 1) )

def isHexagonal(n: Int): Boolean = {
  def getHn(n: Int): Double = {
    val a = (n / 2.toDouble) + (1.toDouble/16)
    1.toDouble/4 + Math.sqrt(a)
  }
  val y = getHn(n)
  // return true if y is round number
  // i.e. floor(34.2) != 34.2
  Math.floor(y) == y
}

isHexagonal(40754)
isHexagonal(40755)
isHexagonal(40756)

getTriangle(2)
getPentagon(100000000)
getHexagon(100000000)

val triangles = Stream.iterate(285)(_ + 1).map(getTriangle(_))
val next = triangles.filter(a => isPentagonal(a) && isHexagonal(a)).take(2).toList

